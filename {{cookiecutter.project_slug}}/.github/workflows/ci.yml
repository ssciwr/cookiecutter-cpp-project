name: CI

on:
  # We run CI on pushes to the main branch
  push:
    branches:
      - main
  # and on all pull requests to the main branch
  pull_request:
    branches:
      - main
  # as well as upon manual triggers through the 'Actions' tab of the Github UI
  workflow_dispatch:

{%- if cookiecutter.use_submodules == "No" %}
env:
  CATCH2_VERSION: {{ cookiecutter._catch_version }}
{%- if cookiecutter.python_bindings == "Yes" %}
  PYBIND11_VERSION: {{ cookiecutter._pybind_version }}
{%- endif %}
{%- endif %}

jobs:
  build-and-test:
    name: Testing on ${{ "{{matrix.os}}" }}
    runs-on: ${{ "{{matrix.os}}" }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
{% if cookiecutter.use_submodules == "Yes" %}
      with:
        submodules: 'recursive'
{%- endif %}

{% if cookiecutter.use_submodules == "No" %}
    - name: Install Catch2 (Linux + MacOS)
      if: runner.os != 'Windows'
      run: |
        git clone -b v$CATCH2_VERSION https://github.com/catchorg/Catch2.git
        cd Catch2
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF  ..
        sudo cmake --build . --target install

    - name: Install Catch2 (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone -b v$Env:CATCH2_VERSION https://github.com/catchorg/Catch2.git
        cd Catch2
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF  ..
        cmake --build . --target install
{% if cookiecutter.python_bindings == "Yes" %}
    - name: Install Pybind11 (Linux + MacOS)
      if: runner.os != 'Windows'
      run: |
        git clone -b v$PYBIND11_VERSION https://github.com/pybind/pybind11.git
        cd pybind11
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF  ..
        sudo cmake --build . --target install

    - name: Install Pybind11 (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone -b v$Env:PYBIND11_VERSION https://github.com/pybind/pybind11.git
        cd pybind11
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF  ..
        cmake --build . --target install
{%- endif %}
{%- endif %}

    - name: make build directory
      run: cmake -E make_directory ${{ "{{runner.workspace}}" }}/build

    - name: configure cmake
      shell: bash
      working-directory: ${{ "{{runner.workspace}}" }}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DBUILD_DOCS=OFF

    - name: build
      shell: bash
      working-directory: ${{ "{{runner.workspace}}" }}/build
      run: cmake --build .

    - name: run tests
      shell: bash
      working-directory: ${{ "{{runner.workspace}}" }}/build
      run: ctest
{%- if cookiecutter.python_bindings == "Yes" %}
  python-testing:
    name: Python package testing on ${{ "{{matrix.os}}" }}
    runs-on: ${{ "{{matrix.os}}" }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
{% if cookiecutter.use_submodules == "Yes" %}
      with:
        submodules: 'recursive'
{%- endif %}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8

    - name: Run Python tests
      shell: bash
      run: |
        python -m pip install .
        python -m pip install -r requirements-dev.txt
        pytest
{%- endif %}

{% if cookiecutter.codecovio == "Yes" %}
  coverage-test:
    name: Coverage Testing
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
{% if cookiecutter.use_submodules == "Yes" %}
      with:
        submodules: 'recursive'
{%- endif %}

    - name: Install LCov
      run: |
        sudo apt-get install -y lcov

{% if cookiecutter.use_submodules == "No" %}
    - name: Install Catch2 (Linux + MacOS)
      if: runner.os != 'Windows'
      run: |
        git clone -b v$CATCH2_VERSION https://github.com/catchorg/Catch2.git
        cd Catch2
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF  ..
        sudo cmake --build . --target install

    - name: Install Catch2 (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone -b v$Env:CATCH2_VERSION https://github.com/catchorg/Catch2.git
        cd Catch2
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF  ..
        cmake --build . --target install
{% if cookiecutter.python_bindings == "Yes" %}
    - name: Install Pybind11 (Linux + MacOS)
      if: runner.os != 'Windows'
      run: |
        git clone -b v$PYBIND11_VERSION https://github.com/pybind/pybind11.git
        cd pybind11
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF  ..
        sudo cmake --build . --target install

    - name: Install Pybind11 (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone -b v$Env:PYBIND11_VERSION https://github.com/pybind/pybind11.git
        cd pybind11
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF  ..
        cmake --build . --target install
{%- endif %}
{%- endif %}

    - name: make build directory
      run: cmake -E make_directory ${{ "{{runner.workspace}}" }}/build

    - name: configure cmake
      shell: bash
      working-directory: ${{ "{{runner.workspace}}" }}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_CXX_FLAGS="--coverage" -DBUILD_DOCS=OFF

    - name: build
      shell: bash
      working-directory: ${{ "{{runner.workspace}}" }}/build
      run: cmake --build .

    - name: run tests
      shell: bash
      working-directory: ${{ "{{runner.workspace}}" }}/build
      run: ctest

    - name: collect coverage report
      shell: bash
      working-directory: ${{ "{{runner.workspace}}" }}
      run: |
        lcov --directory ./build{% if cookiecutter.header_only == "No" %}/src{% endif %} --capture --output-file coverage.info
        bash <(curl --connect-timeout 10 --retry 5 -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
{% endif %}
